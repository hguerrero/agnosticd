# The following is only appropriate when create generic tenants whose names are sequential
# The following is skipped when creating a "named" tenant, ie; openbanking-dev  
- block:
  - set_fact:
      counter: "{{ item }}"   

  # Name of ocp user that is an admin to the project where 3scale resources reside
  - set_fact:
      ocpAdminId: "{{ ocp_user_name_base }}{{ counter }}"
  
  # Name of 3scale API administrator of the tenant
  - set_fact:
      tenantAdminId: "{{ tenant_admin_name_base }}{{ counter }}"
  
  - set_fact:
      orgName: "{{ocpAdminId}}-tenant"

  - set_fact:
      tenantGwProject: "{{ ocpAdminId }}-gw"

  - set_fact:
      tenantGwProjectDisplay: "{{ ocpAdminId }} APICast Gateways Project"
  when: item > 0

- name: "{{orgName}}      1)  **********   TENANT CREATION  **********"
  set_fact: 
    tenantAdminEmail: "{{adminEmailUser}}%2B{{ orgName }}%40{{adminEmailDomain}}"
- debug: 
    msg: "{{orgName}} tenantAdminEmail = {{tenantAdminEmail}}"

- name: Create OpenShift Objects for 3scale multitenant
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/gateway-operatorgroup.j2
  - ./templates/gteway-subscription.j2

- name: "Create the {{orgName}} CRDs"
  k8s:
    state: present
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', item ) | from_yaml }}"
  loop:
  - ./templates/tenant-admin-secret.j2
  - ./templates/tenant.j2

# Routes are created after some delay. Wait here for routes to  be ready.
- pause:
    minutes: 1

# Get the {{ orgName}} Admin URL
- name: Get the {{ orgName}} Admin URL
  shell: >
    oc get secret "{{ orgName }}-tenant-secret"  -o json -n "{{ api_manager_namespace }}" | jq -r .data.adminURL | base64 -d
  register: tenant_admin_url
  ignore_errors: True

# Get the {{ orgName}} Access Token
- name: Get the {{ orgName}} Admin URL
  shell: >
    oc get secret "{{ orgName }}-tenant-secret"  -o json -n "{{ api_manager_namespace }}" | jq -r .data.token | base64 -d
  register: tenant_access_token
  ignore_errors: True

# create the tenant Gateway
- block:
    - name: "**********  {{  tenantGwProject }} TENANT API GW  Provisioning **********"
      command: "oc adm new-project {{ tenantGwProject }} --admin={{ ocp_user }}  --description='{{ tenantGwProjectDisplay }}'"
      register: create_proj
      failed_when: create_proj.stderr != ""  and 'already exists' not in create_proj.stderr

    - set_fact:
        THREESCALE_PORTAL_ENDPOINT: "https://{{ tenant_access_token.matches[0].value }}@{{orgName}}-admin.amp.{{ocp_apps_domain}}"

    - name: "Create threescale-registry-auth image pull secret in {{ tenantGwProject }}"
      shell: |
        oc create secret docker-registry threescale-registry-auth \
            --docker-server=registry.redhat.io \
            --docker-username='{{ rht_service_token_user }}' \
            --docker-password={{ rht_service_token_password }} \
            -n  {{ tenantGwProject }}

    - name: "Create threescale-portal-endpoint-stage secret in {{ tenantGwProject }}"
      shell: |
        oc secret new-basicauth apicast-configuration-url-secret-stage \
            --from-literal=AdminPortalURL='{{ THREESCALE_PORTAL_ENDPOINT }}' \
            -n  {{ tenantGwProject }}


    - name: "Create threescale-portal-endpoint-prod secret in {{ tenantGwProject }}"
      shell: |
        oc secret new-basicauth apicast-configuration-url-secret-prod \
            --from-literal=AdminPortalURL='{{ THREESCALE_PORTAL_ENDPOINT }}' \
            -n  {{ tenantGwProject }}

    - name: "Create Apicast Operator & CRDs"
      k8s:
      state: present
      merge_type:
      - strategic-merge
      - merge
      definition: "{{ lookup('template', item ) | from_yaml }}"
      loop:
      - ./templates/gateway-operatorgroup.j2
      - ./templates/gateway-subscription.j2            

    - name: "Wait for APIcast CRD to be available"
      k8s_facts:
        api_version: apiextensions.k8s.io/v1
        kind: CustomResourceDefinition
        name: apicasts.apps.3scale.net
      register: r_crd
      retries: 60
      delay: 15
      until: r_crd.resources | list | length == 1

    - name: "Create Stage & Prod APICast"  
      k8s:
      state: present
      merge_type:
      - strategic-merge
      - merge
      definition: "{{ lookup('template', item ) | from_yaml }}"
      loop:
      - ./templates/apicast-stage.j2
      - ./templates/apicast-prod.j2    
  when: create_gws_with_each_tenant|bool